from ..basic_mutation import basic_mutation
import numpy as np
class rand_to_best_1(basic_mutation):
    def get_parameters_numbers(self):
        # F --scaling factor 0<=F<=1
        return 1
    
    # def mutation(self, env,individual_indice):
    #     """
    #     Perform mutation on an individual in the population.
    #     Args:
    #         env (Environment): The environment object containing the population.
    #         individual_indice (int): The index of the individual to mutate.
    #     Returns:
    #         numpy.ndarray: The mutated individual.
    #     Raises:
    #         None
    #     """
        
    #     population_object=env.population
    #     parameters=env.action['mutation_parameters']
        
    #     F = parameters[0]
    #     population=population_object.current_vector
    #     best_individual=np.min(population_object.current_fitness)
    #     best_individual_indice=np.argmin(population_object.current_fitness)
    #     Len=population_object.pop_size
    #     indices = random.sample(range(Len), 2)
    #     x1, x2 = population[indices[0]], population[indices[1]]
        
    #     mutated_vector=population[individual_indice]+F*(population[best_individual_indice]-population[individual_indice])+F*(x1-x2) # is it correct?

    #     new_individual=mutated_vector            
    #     return new_individual
    
    # population version 
    def mutation(self,env,pop_indexs,parameters):
        """
        Perform mutation using the rand/1 strategy.
        This method generates a mutated vector for a given population using the DE/rand/1 mutation strategy.
        It constructs two random vectors from the population and combines them with a scaling factor to produce the mutated vector.
        Args:
            env (object): The environment object containing the population and mutation parameters.
            pop_indexs (list): List of indices of the population members to be mutated.
        Returns:
            np.ndarray: The mutated vector generated by the rand/1 strategy.
        """
        population_object=env.population
        sub_vector=self.construct_sub_vector(env,pop_indexs)
        population = population_object.current_vector
        
        best_individual_indice=np.argmin(population_object.current_fitness)
        best_individual=population[best_individual_indice]
        random_indice=self.construct_random_indices(env,len(pop_indexs),2)
        F=parameters[:,0]
        F = F[:, np.newaxis]
        x1,x2=population[random_indice.T]
        
        mutated_vector=sub_vector+F*(best_individual-sub_vector)+F*(x1-x2) # is it correct?
        mutated_vector=self.re_boudary(env,mutated_vector)
        return mutated_vector       