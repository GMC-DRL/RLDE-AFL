from ..basic_mutation import basic_mutation
import numpy as np

class rand_1(basic_mutation):
    def get_parameters_numbers(self):
        #F --scaling factor 0<=F<=1 
        return 1
    
    # def mutation(self,env,individual_indice):
    #     """
    #     Perform mutation on an individual in the population using the rand1 strategy.
    #     Parameters:
    #     - env: The environment object containing the population.
    #     - individual_indice: The index of the individual to mutate.
    #     Returns:
    #     - new_individual: The mutated individual.
    #     """
        
    #     population_object=env.population
    #     population=population_object.current_vector
    #     parameters=env.action['mutation_parameters']
    #     F = parameters[0]
    #     Len=population_object.pop_size
    #     new_individual=np.empty_like(population[individual_indice])
    #     indices = random.sample(range(Len), 3)
        
        
    #     # Select three random individuals from the population
    #     x1, x2, x3 = population[indices[0]], population[indices[1]], population[indices[2]]
    #     # print('x1',x1)
    #     # print('x2',x2)
    #     # print('x3',x3)
    #     # Perform mutation using rand1 strategy
    #     mutated_vector = x1 + F * (x2 - x3)
    #     # print('mutated_vector',mutated_vector)
    #     # Add the mutated vector to the new population
    #     new_individual = mutated_vector

    #     return new_individual
   
   # population version 
    def mutation(self,env,indices,parameters):
        """
        Perform mutation using the rand/1 strategy.
        This method generates a mutated vector for a given population using the DE/rand/1 mutation strategy.
        It constructs two random vectors from the population and combines them with a scaling factor to produce the mutated vector.
        Args:
            env (object): The environment object containing the population and mutation parameters.
            pop_indexs (list): List of indices of the population members to be mutated.
        Returns:
            np.ndarray: The mutated vector generated by the rand/1 strategy.
        """
        population_object=env.population
        # parameters=env.action['mutation_parameters']
        population = population_object.current_vector

        random_indices=self.construct_random_indices(env,len(indices),3)
        x1,x2,x3=population[random_indices.T]        
        F=parameters[:,0]
        F = F[:, np.newaxis]
        # Perform mutation using rand1 strategy
        mutated_vector = x1 + F * (x2 - x3)
        mutated_vector=self.re_boudary(env,mutated_vector)
        return mutated_vector       
    
        