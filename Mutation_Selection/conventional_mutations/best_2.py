from ..basic_mutation import basic_mutation
import numpy as np
class best_2(basic_mutation):
    def get_parameters_numbers(self):
        # F --scaling factor 0<=F<=1
        return 1
    
    # def mutation(self, env,individual_indice):
    #     """
    #     Perform mutation on an individual in the population.
    #     Args:
    #         env (Environment): The environment object containing the population.
    #         individual_indice (int): The index of the individual to mutate.
    #     Returns:
    #         numpy.ndarray: The mutated individual.
    #     Raises:
    #         None
    #     Examples:
    #         # Create an environment object
    #         env = Environment()
    #         # Perform mutation on the individual at index 0
    #         mutated_individual = mutation(env, 0)
    #     """
        
    #     population_object=env.population
    #     parameters=env.action['mutation_parameters']
        
    #     population=population_object.current_vector
    #     F = parameters[0]

    #     Len=population_object.pop_size
    #     # get the best individual
    #     best_individual_indice=0
    #     best_individual=np.max(population_object.current_fitness)
    #     best_individual_indice=np.argmax(population_object.current_fitness)
    #     #  is there a better way to get the best individual?
        
    #     best=population[best_individual_indice]
    #     # for i in range(Len):
    #     indices = random.sample(range(Len), 4)
    #     x1, x2, x3,x4 = population[indices[0]], population[indices[1]], population[indices[2]], population[indices[3]]
    #     mutated_vector=best+F*(x1-x2)+F*(x3-x4) # is it correct?
    #     new_individual=mutated_vector
        
    #     return new_individual
    
    # population version
    def mutation(self,env,pop_indexs,parameters):
        """
        Perform mutation operation on the population.
        This method applies a differential evolution mutation strategy to generate a mutated vector
        based on the best individual and a set of randomly selected individuals from the population.
        Args:
            env (object): The environment object containing the population and mutation parameters.
            pop_indexs (list): Indices of the population members to be considered for mutation.
        Returns:
            numpy.ndarray: The mutated vector generated by the mutation operation.
        """
    
        population_object=env.population
        
        F = parameters[:,0]
        F = F[:, np.newaxis]
        population = population_object.current_vector
        
        best_individual_indice=np.argmin(population_object.current_fitness)
        best_individual=population[best_individual_indice]
        
        random_indices=self.construct_random_indices(env,len(pop_indexs),4)
        x1,x2,x3,x4=population[random_indices.T] 
        
        mutated_vector =best_individual+F*(x1-x2)+F*(x3-x4)
        mutated_vector=self.re_boudary(env,mutated_vector)
        # mutated_vector= mutated_vector[pop_indexs]
        return mutated_vector