from ..basic_mutation import basic_mutation
import numpy as np

class current_to_rand_1(basic_mutation):
    def get_parameters_numbers(self):
        # F --scaling factor 0<=F<=1
        return 1
    
    # def mutation(self, env,individual_indice):
    #     """
    #     Perform mutation on an individual in the population.
    #     Args:
    #         env (Environment): The environment object containing the population.
    #         individual_indice (int): The index of the individual to mutate.
    #     Returns:
    #         new_individual: The mutated individual.
    #     Raises:
    #         None
    #     """
        
    #     population_object=env.population
    #     parameters=env.action['mutation_parameters']
        
    #     F = parameters[0]
        
    #     # for i in range(len(population)):
    #     # Select three random individuals from the population
    #     population=population_object.current_vector
    #     Len=population_object.pop_size
    #     indices = random.sample(range(Len), 3)
    #     x1, x2, x3 = population[indices[0]], population[indices[1]], population[indices[2]]
        
    #     # Perform mutation using rand2 strategy
    #     mutated_vector= population[individual_indice]+random.random()*(x1-population[individual_indice])+F*(x2-x3) # is it correct?
    #     # Add the mutated vector to the new population
    #     new_individual=mutated_vector        
        
    #     return new_individual
    
    # population version
    def mutation(self,env,pop_indexs,parameters):
        """
        Perform mutation operation on the population.
        This method applies a differential evolution mutation strategy to generate a mutated vector
        based on the current individual and two randomly selected individuals from the population.
        Args:
            env (object): The environment object containing the population and mutation parameters.
            pop_indexs (list): Indices of the population members to be considered for mutation.
        Returns:
            numpy.ndarray: The mutated vector generated by the mutation operation.
        """
        
        population_object=env.population
        
        F = parameters[:,0]
        F = F[:, np.newaxis]
        population = population_object.current_vector
        
        sub_pop=self.construct_sub_vector(env,pop_indexs)
        random_indices=self.construct_random_indices(env,len(pop_indexs),3)
        x1,x2,x3=population[random_indices.T]     
        mutated_vector= sub_pop+np.random.rand()*(x1-sub_pop)+F*(x2-x3) # is it correct?
        mutated_vector=self.re_boudary(env,mutated_vector)
        
        
        return mutated_vector